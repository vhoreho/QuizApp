import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { PlusIcon, Pencil1Icon, TrashIcon } from "@radix-ui/react-icons";
import { toast } from "@/components/ui/use-toast";
import { Subject } from "@/lib/types";
import { getAutoSubjectIcon } from "@/lib/constants/radix-subject-icons";

import { quizApi } from "@/api/quizApi";

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–º–µ—Ç–∞
const subjectFormSchema = z.object({
  name: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
});

type SubjectFormValues = z.infer<typeof subjectFormSchema>;

export function SubjectManagement() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [editingSubject, setEditingSubject] = useState<Subject | null>(null);
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const form = useForm<SubjectFormValues>({
    resolver: zodResolver(subjectFormSchema),
    defaultValues: {
      name: "",
    },
  });

  useEffect(() => {
    fetchSubjects();
  }, []);

  const fetchSubjects = async () => {
    try {
      const data = await quizApi.getAllSubjects();
      setSubjects(data);
    } catch (error) {
      console.error("Error fetching subjects:", error);
      toast({ title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteSubject = async (id: number) => {
    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?")) {
      return;
    }

    try {
      await quizApi.deleteSubject(id);
      setSubjects(subjects.filter((subject) => subject.id !== id));
      toast({ title: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
      console.error("Error deleting subject:", error);
      toast({ title: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞", variant: "destructive" });
    }
  };

  const onSubmit = async (data: SubjectFormValues) => {
    try {
      if (editingSubject) {
        const updatedSubject = await quizApi.updateSubject(editingSubject.id, {
          name: data.name,
        });
        setSubjects(
          subjects.map((subject) =>
            subject.id === editingSubject.id ? updatedSubject : subject
          )
        );
        setEditingSubject(null);
        toast({ title: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω" });
      } else {
        const newSubject = await quizApi.createSubject({
          name: data.name,
        });
        setSubjects([...subjects, newSubject]);
        setIsCreateDialogOpen(false);
        toast({ title: "–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" });
      }
      form.reset();
    } catch (error) {
      console.error("Error saving subject:", error);
      toast({
        title: `–û—à–∏–±–∫–∞ –ø—Ä–∏ ${
          editingSubject ? "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" : "—Å–æ–∑–¥–∞–Ω–∏–∏"
        } –ø—Ä–µ–¥–º–µ—Ç–∞`,
        variant: "destructive",
      });
    }
  };

  return (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between">
        <div>
          <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏</CardTitle>
          <CardDescription>
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
          </CardDescription>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <PlusIcon className="mr-2 h-4 w-4" />
              –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>
                {editingSubject ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç" : "–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç"}
              </DialogTitle>
              <DialogDescription>
                {editingSubject
                  ? "–ò–∑–º–µ–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ"
                  : "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ"}
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-4"
              >
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"
                          {...field}
                          className="text-lg h-12"
                        />
                      </FormControl>
                      <FormMessage />
                      {field.value && (
                        <div className="flex items-center gap-2 mt-2 p-2 bg-muted/50 rounded-md">
                          <div className="flex items-center justify-center w-8 h-8 bg-background rounded border">
                            {getAutoSubjectIcon(field.value)}
                          </div>
                          <span className="text-sm text-muted-foreground">
                            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞
                          </span>
                        </div>
                      )}
                    </FormItem>
                  )}
                />

                <DialogFooter className="gap-2">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setIsCreateDialogOpen(false);
                      setEditingSubject(null);
                      form.reset();
                    }}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button type="submit">
                    {editingSubject ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–°–æ–∑–¥–∞—Ç—å"}
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="text-center py-8">
            <div className="w-8 h-8 border-t-2 border-primary border-solid rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤...</p>
          </div>
        ) : (
          <>
            {subjects.length === 0 ? (
              <div className="text-center py-12">
                <div className="w-16 h-16 mx-auto mb-4 text-6xl text-muted-foreground/50">
                  üìö
                </div>
                <h3 className="text-lg font-semibold mb-2">–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤</h3>
                <p className="text-muted-foreground mb-4">
                  –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
                </p>
                <Button
                  onClick={() => setIsCreateDialogOpen(true)}
                  variant="outline"
                >
                  <PlusIcon className="mr-2 h-4 w-4" />
                  –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
                </Button>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {subjects.map((subject) => (
                  <Card
                    key={subject.id}
                    className="hover:shadow-md transition-shadow duration-200 border-2 hover:border-primary/20"
                  >
                    <CardContent className="p-6">
                      {editingSubject?.id === subject.id ? (
                        <Form {...form}>
                          <form
                            onSubmit={form.handleSubmit(onSubmit)}
                            className="space-y-4"
                          >
                            <FormField
                              control={form.control}
                              name="name"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>–ù–∞–∑–≤–∞–Ω–∏–µ</FormLabel>
                                  <FormControl>
                                    <Input
                                      {...field}
                                      placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"
                                    />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                            <div className="flex gap-2 pt-2">
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => {
                                  setEditingSubject(null);
                                  form.reset();
                                }}
                                className="flex-1"
                              >
                                –û—Ç–º–µ–Ω–∞
                              </Button>
                              <Button
                                type="submit"
                                size="sm"
                                className="flex-1"
                              >
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                              </Button>
                            </div>
                          </form>
                        </Form>
                      ) : (
                        <>
                          <div className="text-center mb-4">
                            <div className="mb-2 flex justify-center">
                              <div className="w-12 h-12 flex items-center justify-center bg-muted rounded-lg">
                                {getAutoSubjectIcon(subject.name)}
                              </div>
                            </div>
                            <h3 className="font-semibold text-lg">
                              {subject.name}
                            </h3>
                          </div>
                          <div className="flex gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                setEditingSubject(subject);
                                form.reset({
                                  name: subject.name,
                                });
                              }}
                              className="flex-1"
                            >
                              <Pencil1Icon className="mr-2 h-3 w-3" />
                              –ò–∑–º–µ–Ω–∏—Ç—å
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDeleteSubject(subject.id)}
                              className="text-destructive hover:text-destructive-foreground hover:bg-destructive"
                            >
                              <TrashIcon className="h-3 w-3" />
                            </Button>
                          </div>
                        </>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
}
